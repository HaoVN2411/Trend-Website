// <auto-generated />
using System;
using AssignmentSWD.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssignmentSWD.Infrastructure.Migrations
{
    [DbContext(typeof(TrendContext))]
    [Migration("20240320165627_AddImageEntity")]
    partial class AddImageEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.FieldEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.PlatformEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PlatformName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.RegionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.SearchEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Search");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.TrendEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FieldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PlatformId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FieldId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("RegionId");

                    b.ToTable("Trend");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.TrendImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TrendId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TrendId");

                    b.ToTable("TrendImage");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidateEmailKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.TrendEntity", b =>
                {
                    b.HasOne("AssignmentSWD.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("Trends")
                        .HasForeignKey("AuthorId");

                    b.HasOne("AssignmentSWD.Infrastructure.Entities.FieldEntity", "Field")
                        .WithMany("TrendEntities")
                        .HasForeignKey("FieldId");

                    b.HasOne("AssignmentSWD.Infrastructure.Entities.PlatformEntity", "Platform")
                        .WithMany("TrendEntities")
                        .HasForeignKey("PlatformId");

                    b.HasOne("AssignmentSWD.Infrastructure.Entities.RegionEntity", "Region")
                        .WithMany("TrendEntities")
                        .HasForeignKey("RegionId");

                    b.Navigation("Field");

                    b.Navigation("Platform");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.TrendImage", b =>
                {
                    b.HasOne("AssignmentSWD.Infrastructure.Entities.TrendEntity", "Trend")
                        .WithMany("TrendImages")
                        .HasForeignKey("TrendId");

                    b.Navigation("Trend");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.FieldEntity", b =>
                {
                    b.Navigation("TrendEntities");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.PlatformEntity", b =>
                {
                    b.Navigation("TrendEntities");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.RegionEntity", b =>
                {
                    b.Navigation("TrendEntities");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.TrendEntity", b =>
                {
                    b.Navigation("TrendImages");
                });

            modelBuilder.Entity("AssignmentSWD.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Navigation("Trends");
                });
#pragma warning restore 612, 618
        }
    }
}
